{"version":3,"sources":["logo.svg","aboutme/me.png","aboutme/aboutme.js","frontpage.js","serviceWorker.js","index.js"],"names":["module","exports","AboutMe","console","log","ClickAwayListener","onClickAway","this","props","closeHandler","mouseEvent","isAboutMeOpen","Drawer","classes","paper","anchor","open","variant","transitionDuration","className","Typography","align","src","picOfMe","alt","List","ListItem","href","React","Component","FrontPage","aboutMeOpenHandler","setState","aboutMeCloseHandler","state","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Button","size","logo","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.363f516b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/me.2d73ec29.png\";","import React from \"react\";\r\nimport {\r\n\tClickAwayListener,\r\n\tDrawer,\r\n\tTypography,\r\n\tList,\r\n\tListItem\r\n} from \"@material-ui/core\";\r\nimport \"./aboutme.css\";\r\nimport picOfMe from \"./me.png\";\r\n\r\nclass AboutMe extends React.Component {\r\n\trender() {\r\n\t\tconsole.log(\"rendered\");\r\n\t\treturn (\r\n\t\t\t<ClickAwayListener\r\n\t\t\t\tonClickAway={this.props.closeHandler}\r\n\t\t\t\tmouseEvent={this.props.isAboutMeOpen ? \"onClick\" : false}\r\n\t\t\t>\r\n\t\t\t\t<Drawer\r\n\t\t\t\t\tclasses={{ paper: \"DrawerPaper\" }}\r\n\t\t\t\t\tanchor=\"right\"\r\n\t\t\t\t\topen={this.props.isAboutMeOpen}\r\n\t\t\t\t\tvariant=\"persistent\"\r\n\t\t\t\t\ttransitionDuration={500}\r\n\t\t\t\t>\r\n\t\t\t\t\t<div className=\"AboutMeInfo\">\r\n\t\t\t\t\t\t<Typography variant=\"h5\" align=\"center\">\r\n\t\t\t\t\t\t\tAbout Me:\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<img src={picOfMe} alt=\"pictures of me\" />\r\n\t\t\t\t\t\t<div className=\"text\">\r\n\t\t\t\t\t\t\t<Typography variant=\"body1\">\r\n\t\t\t\t\t\t\t\tHello, I'm Nelson Lai, This is my site that I use to test\r\n\t\t\t\t\t\t\t\tvarious things. I play video games and I love memes.\r\n\t\t\t\t\t\t\t\t<br /> <br />\r\n\t\t\t\t\t\t\t\tHeres some dumb info about me:\r\n\t\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t\t<List>\r\n\t\t\t\t\t\t\t\t<ListItem>Email: NelsonL93@gmail.com</ListItem>\r\n\t\t\t\t\t\t\t\t<ListItem>\r\n\t\t\t\t\t\t\t\t\t<a href=\"https://www.facebook.com/LNelson\">Facebook</a>\r\n\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t\t<ListItem>\r\n\t\t\t\t\t\t\t\t\t<a href=\"https://www.dotabuff.com/players/33579516\">\r\n\t\t\t\t\t\t\t\t\t\tDotaBuff\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t\t<ListItem>\r\n\t\t\t\t\t\t\t\t\t<a href=\"https://www.instagram.com/neldogmillionaire/?hl=en\">\r\n\t\t\t\t\t\t\t\t\t\tInstagram\r\n\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t</List>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Drawer>\r\n\t\t\t</ClickAwayListener>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default AboutMe;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./frontpage.css\";\nimport {\n\tAppBar,\n\tIconButton,\n\tToolbar,\n\tTypography,\n\tButton\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AboutMe from \"./aboutme/aboutme\";\n\nclass FrontPage extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tisAboutMeOpen: false\n\t\t};\n\t}\n\n\taboutMeOpenHandler = () => {\n\t\tthis.setState({ isAboutMeOpen: true });\n\t};\n\n\taboutMeCloseHandler = () => {\n\t\tconsole.log(\"closed\");\n\t\tthis.setState({ isAboutMeOpen: false });\n\t};\n\n\trender() {\n\t\tconsole.log(\"isaboutme\", this.state.isAboutMeOpen);\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<AppBar position=\"static\">\n\t\t\t\t\t<Toolbar className=\"TopBar\">\n\t\t\t\t\t\t<IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n\t\t\t\t\t\t\t<MenuIcon />\n\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t<Typography variant=\"h6\">Applets</Typography>\n\t\t\t\t\t\t<div className=\"AboutMe\" onClick={this.aboutMeOpenHandler}>\n\t\t\t\t\t\t\t<Button color=\"primary\" variant=\"contained\" size=\"medium\">\n\t\t\t\t\t\t\t\tAbout Me!\n\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t\t<AboutMe\n\t\t\t\t\tisAboutMeOpen={this.state.isAboutMeOpen}\n\t\t\t\t\tcloseHandler={this.aboutMeCloseHandler}\n\t\t\t\t/>\n\n\t\t\t\t<header className=\"App-header\">\n\t\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t\t<p>Haha just testing stuff just a prank bros</p>\n\t\t\t\t</header>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default FrontPage;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport FrontPage from \"./frontpage\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<FrontPage />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}